import copyimport randomimport loggingfrom typing import NamedTuplefrom dataclasses import dataclassclass Die():    def __init__(self):        self.value = random.randint(1, 6)            def roll(self):        self.value = random.randint(1, 6)            def __repr__(self):        return str(self.value)        def __eq__(self, other):        return self.value == other.value    @dataclassclass GameDie:    '''Die used in Fakel game'''    die: Die    locked: bool = False    class DiceHand():    def __init__(self, num_die: int = 6):        self.num_die = num_die        self.all_dice = {i:GameDie(Die()) for i in range(self.num_die)}        self.score = 0            def roll_all_dice(self):        for i, d in self.all_dice.items(): d.die.roll()            def roll(self):        '''roll non-locked dice'''        for i, d in self.all_dice.items():             if not d.locked:                d.die.roll()            def lock_dice(self, *args):        for i in args:            self.all_dice[i].locked = True                @property    def free_dice(self):        return {i:d for i, d in self.all_dice.items() if not d.locked}        @property    def locked_dice(self):        return {i:d for i, d in self.all_dice.items() if d.locked}        def __repr__(self):        s = ''        for i, d in self.free_dice.items():            s += f'{i}: {d.die}\n'        for i, d in self.locked_dice.items():            s += f'{i}: {d.die} - Locked\n'        return s                def __contains__(self, key):        '''checks if a dicehand combination included in self'''        is_contained = False        if isinstance(key, DiceHand):            dice_compare: DiceHand = copy.deepcopy(key)            didnt_find = False            d_count = 0            while not didnt_find and d_count < dice_compare.num_die:                if not dice_compare.all_dice[d_count].locked:                    die_compare: Die = dice_compare.all_dice[d_count].die                    found_in = False                    i = 0                    while not found_in and i < self.num_die:                        d = self.all_dice[i]                        found_in = die_compare == d.die and not d.locked                        i += 1                        # if the comparison dice found in hand then lock                         # so can no longer compare to that die                        if found_in: d.locked = True                    # if found_in still False                    # means didn't find the dice (unlocked) in hand                    if not found_in: didnt_find = True            # if didnt_find still false            # means found all comparison dice in self            if not didnt_find: is_contained = True        return is_contained        class Player():    def __init__(self, name: str):        self.name = name        self.dice_hand = DiceHand()        self.score = 0                class ScoringHand(NamedTuple):    dice_set: DiceHand    score: int        class ScoreKeeper():    def __init__(self):        pass    if __name__ == '__main__':    # d = Die()    # d.roll()    # print(d)        dh1 = DiceHand()    dh1.roll_all_dice()    dh2 = copy.deepcopy(dh1)    print(dh1)    print(dh2)        print(dh2 in dh1)    